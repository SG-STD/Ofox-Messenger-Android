package com.sgstudio.OfoxMessenger

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.snackbar.Snackbar
import com.sgstudio.OfoxMessenger.databinding.ActivityErrorHandlerBinding
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.json.JSONObject
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.HttpURLConnection
import java.net.URL

class ErrorHandlerActivity : AppCompatActivity() {

    private lateinit var binding: ActivityErrorHandlerBinding
    private var errorLog: String = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityErrorHandlerBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –∏–∑ Intent
        val exception = intent.getSerializableExtra("exception") as Throwable?
        val threadName = intent.getStringExtra("thread_name") ?: "Unknown thread"
        errorLog = intent.getStringExtra("error_log") ?: "No error log available"

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        binding.errorMessageTextView.text = exception?.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        binding.errorDetailsTextView.text = errorLog

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        setupButtons()

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        sendErrorReportToTelegram(exception, threadName)
    }

    private fun setupButtons() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        binding.closeButton.setOnClickListener {
            finishAffinity() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        binding.restartButton.setOnClickListener {
            val intent = Intent(this, MainActivity::class.java)
            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            startActivity(intent)
            finishAffinity()
        }

        // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞
        binding.copyLogButton.setOnClickListener {
            val clipboard = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
            val clip = ClipData.newPlainText("Error Log", errorLog)
            clipboard.setPrimaryClip(clip)
            
            Snackbar.make(binding.root, "–õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", Snackbar.LENGTH_SHORT).show()
        }
    }

    private fun sendErrorReportToTelegram(exception: Throwable?, threadName: String) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                val deviceInfo = getDeviceInfo()

                // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –æ—à–∏–±–∫–µ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
                val infoMessage = """
                üö® –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ OfoxMessenger üö®
                
                üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:
                $deviceInfo
                
                ‚ö†Ô∏è –û—à–∏–±–∫–∞:
                ${exception?.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}
                
                üßµ –ü–æ—Ç–æ–∫: $threadName
            """.trimIndent()

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                sendPlainTextMessage(infoMessage)

                // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–¥–∞
                val stackTrace = exception?.stackTraceToString()?.take(3000) ?: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
                sendCodeBlockMessage(stackTrace)

                withContext(Dispatchers.Main) {
                    Snackbar.make(
                        binding.root,
                        "–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º",
                        Snackbar.LENGTH_LONG
                    ).show()
                }

            } catch (e: Exception) {
                Log.e("ErrorHandler", "Error sending report", e)
            }
        }
    }

    private fun sendPlainTextMessage(message: String) {
        try {
            val botToken = "7966724924:AAGfDjTh8-OssTWAMo6tDcXa22OY3zpNXVk"
            val chatId = "2129429604"
            val apiUrl = "https://api.telegram.org/bot$botToken/sendMessage"

            val url = URL(apiUrl)
            val connection = url.openConnection() as HttpURLConnection
            connection.requestMethod = "POST"
            connection.doOutput = true
            connection.setRequestProperty("Content-Type", "application/json")

            val data = JSONObject().apply {
                put("chat_id", chatId)
                put("text", message)
                // –ë–µ–∑ parse_mode - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            }

            connection.outputStream.use { os ->
                os.write(data.toString().toByteArray())
            }

            val responseCode = connection.responseCode
            if (responseCode != HttpURLConnection.HTTP_OK) {
                Log.e("ErrorHandler", "Failed to send plain text message: $responseCode")
            }
        } catch (e: Exception) {
            Log.e("ErrorHandler", "Error in sendPlainTextMessage", e)
        }
    }

    private fun sendCodeBlockMessage(stackTrace: String) {
        try {
            val botToken = "7966724924:AAGfDjTh8-OssTWAMo6tDcXa22OY3zpNXVk"
            val chatId = "2129429604"
            val apiUrl = "https://api.telegram.org/bot$botToken/sendMessage"

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±–ª–æ–∫ –∫–æ–¥–∞
            val formattedMessage = "```\n$stackTrace\n```"

            val url = URL(apiUrl)
            val connection = url.openConnection() as HttpURLConnection
            connection.requestMethod = "POST"
            connection.doOutput = true
            connection.setRequestProperty("Content-Type", "application/json")

            val data = JSONObject().apply {
                put("chat_id", chatId)
                put("text", formattedMessage)
                put("parse_mode", "Markdown") // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Markdown, –Ω–µ MarkdownV2
            }

            connection.outputStream.use { os ->
                os.write(data.toString().toByteArray())
            }

            val responseCode = connection.responseCode
            if (responseCode != HttpURLConnection.HTTP_OK) {
                Log.e("ErrorHandler", "Failed to send code block message: $responseCode")
            }
        } catch (e: Exception) {
            Log.e("ErrorHandler", "Error in sendCodeBlockMessage", e)
        }
    }

    private suspend fun sendTelegramMessage(message: String) {
        try {
            val botToken = "7966724924:AAGfDjTh8-OssTWAMo6tDcXa22OY3zpNXVk"
            val chatId = "2129429604"
            val apiUrl = "https://api.telegram.org/bot$botToken/sendMessage"

            val url = URL(apiUrl)
            val connection = url.openConnection() as HttpURLConnection
            connection.requestMethod = "POST"
            connection.doOutput = true
            connection.setRequestProperty("Content-Type", "application/json")

            val data = JSONObject().apply {
                put("chat_id", chatId)
                put("text", message)
                put("parse_mode", "MarkdownV2")
            }

            connection.outputStream.use { os ->
                os.write(data.toString().toByteArray())
            }

            val responseCode = connection.responseCode
            if (responseCode != HttpURLConnection.HTTP_OK) {
                Log.e("ErrorHandler", "Failed to send error report: $responseCode")
            }
        } catch (e: Exception) {
            Log.e("ErrorHandler", "Error in sendTelegramMessage", e)
        }
    }

    private fun getDeviceInfo(): String {
        val packageInfo = packageManager.getPackageInfo(packageName, 0)
        val versionName = packageInfo.versionName
        val versionCode = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            packageInfo.longVersionCode
        } else {
            @Suppress("DEPRECATION")
            packageInfo.versionCode.toLong()
        }
        
        return """
            –ú–æ–¥–µ–ª—å: ${Build.MANUFACTURER} ${Build.MODEL}
            Android: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})
            –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $versionName ($versionCode)
        """.trimIndent()
    }
}
